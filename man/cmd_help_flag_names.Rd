% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parse_help.R
\name{cmd_help_flag_names}
\alias{cmd_help_flag_names}
\title{Parses commandline help options to return vector of valid flag names}
\usage{
cmd_help_flag_names(help_lines, processx = FALSE)
}
\arguments{
\item{help_lines}{\code{character} vector contianing the output of "command
--help", or similar output. Optional: pass either \code{stdout}, or \code{stderr} output from
processx::run(), must set \code{processx = TRUE}.}

\item{processx}{\code{logical(1)} if set to TRUE will split string on "\\n" before
parsing.}
}
\value{
first word entry of each line prefixed by "-". typically this grabs
all flags from --help output, but often times will require extra
postprocessing to remove commas or equal signs, for example.
}
\description{
When using cmdlr to write lazy shell wrappers, the user can easily mistype
a commandline flag since there is not text completion. Some programs behave
unexpectedly when flags are typed incorrectly, and for this reason return uninformative error messages.
}
\details{
\code{cmd_help_flag_names} tries to grab flags from --help documentation which can be used for error checking.
}
\examples{
\dontrun{
# with processx
out <- processx::run("tar", "--help", error_on_status = F)
lines <- strsplit(out$stderr, "\n")[[1]]
fn_flags <- cmd_help_flag_names(lines)

# with system2
lines <- system2("tar", "--help", stderr = T)
fn_flags <- cmd_help_flag_names(lines)
}

}
\seealso{
\code{\link{cmd_suggest_flag_names}} \code{\link{cmd_error_cmd_suggest_flag_names}}
}
